name: Release ScyllaDB MCP Server

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
        pip install pyinstaller
    
    - name: Create standalone executable
      run: |
        # Create a single-file executable for easy distribution
        pyinstaller --onefile \
          --name scylladb-mcp-server \
          --add-data "src/technical_advisor.py:." \
          --add-data "src/scylladb_advisor.py:." \
          --add-data "src/query_analyzer.py:." \
          src/scylladb_mcp_server.py
    
    - name: Package for distribution
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        PACKAGE_NAME="scylladb-mcp-server-$VERSION"
        
        # Create package directory
        mkdir -p $PACKAGE_NAME
        
        # Copy necessary files
        cp -r src $PACKAGE_NAME/
        cp setup.sh $PACKAGE_NAME/
        cp INSTALL.md README.md $PACKAGE_NAME/
        
        # Clean up
        find $PACKAGE_NAME -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        find $PACKAGE_NAME -name "*.pyc" -delete 2>/dev/null || true
        find $PACKAGE_NAME -name "venv*" -type d -exec rm -rf {} + 2>/dev/null || true
        
        # Create config template
        mkdir -p $PACKAGE_NAME/.claude
        cat > $PACKAGE_NAME/.claude/config.example.json << 'EOF'
        {
          "mcpServers": {
            "scylladb": {
              "command": "python3",
              "args": ["./src/scylladb_mcp_server.py"],
              "env": {
                "SCYLLA_CONNECTION_MODE": "docker"
              }
            }
          }
        }
        EOF
        
        # Create archives
        tar -czf $PACKAGE_NAME-linux.tar.gz $PACKAGE_NAME
        zip -r $PACKAGE_NAME-universal.zip $PACKAGE_NAME
        
        # Move to artifacts directory
        mkdir -p artifacts
        mv *.tar.gz *.zip artifacts/
        
        # Copy standalone executable if it exists
        if [ -f dist/scylladb-mcp-server ]; then
          mv dist/scylladb-mcp-server artifacts/scylladb-mcp-server-linux
        fi
    
    - name: Create macOS package
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Create macOS-specific installer script
        cat > install-macos.sh << 'EOF'
        #!/bin/bash
        echo "ðŸš€ Installing ScyllaDB MCP Server for macOS"
        
        # Check for Homebrew Python
        if command -v brew &> /dev/null && brew list python@3.11 &> /dev/null; then
            PYTHON_CMD="/opt/homebrew/bin/python3.11"
        else
            PYTHON_CMD="python3"
        fi
        
        # Run setup
        ./setup.sh
        EOF
        
        chmod +x install-macos.sh
        mv install-macos.sh artifacts/
    
    - name: Generate release notes
      run: |
        cat > artifacts/RELEASE_NOTES.md << 'EOF'
        # ScyllaDB MCP Server Release
        
        ## Installation
        
        ### Quick Install (macOS/Linux)
        ```bash
        # Download and extract
        tar -xzf scylladb-mcp-server-*.tar.gz
        cd scylladb-mcp-server-*
        
        # Run setup
        ./setup.sh
        ```
        
        ### Manual Install
        1. Extract the archive
        2. Install Python dependencies: `pip install -r src/requirements.txt`
        3. Configure Claude Desktop (see INSTALL.md)
        
        ## What's Included
        - ScyllaDB MCP Server with AI-powered workload analysis
        - Technical advisor for migration assessment
        - Cost calculator based on real usage patterns
        - Performance comparison tools
        - Demo scripts for live benchmarking
        
        ## Key Features
        - **97% cost savings** on typical workloads
        - **29% better P99 latency** vs DynamoDB
        - Same DynamoDB API compatibility
        - No throttling - hardware limits only
        EOF
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-packages
        path: artifacts/*
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*
        body_path: artifacts/RELEASE_NOTES.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
        pip install pyinstaller
    
    - name: Create Windows executable
      run: |
        pyinstaller --onefile `
          --name scylladb-mcp-server `
          --add-data "src/technical_advisor.py;." `
          --add-data "src/scylladb_advisor.py;." `
          --add-data "src/query_analyzer.py;." `
          src/scylladb_mcp_server.py
    
    - name: Create Windows installer
      run: |
        # Create batch file for Windows
        @'
        @echo off
        echo Installing ScyllaDB MCP Server for Windows...
        
        REM Check Python
        python --version >nul 2>&1
        if errorlevel 1 (
            echo Error: Python not found. Please install Python 3.11+
            exit /b 1
        )
        
        REM Install dependencies
        pip install -r src\requirements.txt
        
        REM Configure Claude Desktop
        echo Configuring Claude Desktop...
        python -c "import os, json; config_dir = os.path.join(os.environ['APPDATA'], 'Claude'); os.makedirs(config_dir, exist_ok=True); config_file = os.path.join(config_dir, 'claude_desktop_config.json'); config = json.load(open(config_file)) if os.path.exists(config_file) else {}; config.setdefault('mcpServers', {})['scylladb'] = {'command': 'python', 'args': [os.path.join(os.getcwd(), 'src', 'scylladb_mcp_server.py')], 'env': {'SCYLLA_CONNECTION_MODE': 'docker'}}; json.dump(config, open(config_file, 'w'), indent=2); print('Configuration updated!')"
        
        echo.
        echo Installation complete!
        echo Please restart Claude Desktop.
        pause
        '@ | Out-File -FilePath install-windows.bat -Encoding ASCII
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-release
        path: |
          dist/*.exe
          install-windows.bat