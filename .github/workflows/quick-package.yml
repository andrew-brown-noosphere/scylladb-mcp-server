name: Quick Package

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master

jobs:
  package:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create distribution package
      run: |
        PACKAGE_NAME="scylladb-mcp-server-latest"
        
        # Create package directory
        mkdir -p $PACKAGE_NAME
        
        # Copy necessary files
        cp -r src $PACKAGE_NAME/
        cp INSTALL.md README.md $PACKAGE_NAME/
        
        # Create setup script
        cat > $PACKAGE_NAME/setup.sh << 'SETUP_SCRIPT'
        #!/bin/bash
        set -e
        
        echo "ðŸš€ ScyllaDB MCP Server Quick Setup"
        echo "=================================="
        
        # Find Python 3.11+
        if command -v python3.11 &> /dev/null; then
            PYTHON_CMD="python3.11"
        elif command -v python3 &> /dev/null; then
            PYTHON_CMD="python3"
        else
            echo "Error: Python 3 not found"
            exit 1
        fi
        
        # Install dependencies
        echo "Installing dependencies..."
        $PYTHON_CMD -m pip install --user boto3 cassandra-driver docker mcp
        
        # Configure Claude Desktop
        if [[ "$OSTYPE" == "darwin"* ]]; then
            CONFIG_DIR="$HOME/Library/Application Support/Claude"
        else
            CONFIG_DIR="$HOME/.config/Claude"
        fi
        
        mkdir -p "$CONFIG_DIR"
        CONFIG_FILE="$CONFIG_DIR/claude_desktop_config.json"
        
        # Get current directory
        INSTALL_DIR=$(pwd)
        
        # Update config
        $PYTHON_CMD -c "
        import json, os
        config_file = '$CONFIG_FILE'
        install_dir = '$INSTALL_DIR'
        
        config = {}
        if os.path.exists(config_file):
            with open(config_file) as f:
                config = json.load(f)
        
        config.setdefault('mcpServers', {})['scylladb'] = {
            'command': '$PYTHON_CMD',
            'args': [os.path.join(install_dir, 'src', 'scylladb_mcp_server.py')],
            'env': {'SCYLLA_CONNECTION_MODE': 'docker'}
        }
        
        with open(config_file, 'w') as f:
            json.dump(config, f, indent=2)
        "
        
        echo "âœ… Setup complete!"
        echo "Please restart Claude Desktop"
        SETUP_SCRIPT
        
        chmod +x $PACKAGE_NAME/setup.sh
        
        # Create demo runner
        cat > $PACKAGE_NAME/run-demos.sh << 'DEMO_SCRIPT'
        #!/bin/bash
        cd "$(dirname "$0")"
        
        echo "ScyllaDB MCP Server - Demo Menu"
        echo "==============================="
        echo "1. Quick performance test"
        echo "2. Cost analysis demo"
        echo "3. Full YCSB benchmark"
        echo ""
        read -p "Select demo (1-3): " choice
        
        case $choice in
            1) python3 src/quick_demo.py ;;
            2) python3 src/test_mcp_server.py ;;
            3) python3 src/ycsb_benchmark.py ;;
            *) echo "Invalid choice" ;;
        esac
        DEMO_SCRIPT
        
        chmod +x $PACKAGE_NAME/run-demos.sh
        
        # Clean up
        find $PACKAGE_NAME -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        find $PACKAGE_NAME -name "*.pyc" -delete 2>/dev/null || true
        rm -rf $PACKAGE_NAME/src/venv* $PACKAGE_NAME/src/test_*.py
        
        # Create archives
        tar -czf $PACKAGE_NAME.tar.gz $PACKAGE_NAME
        zip -r $PACKAGE_NAME.zip $PACKAGE_NAME -q
        
        echo "âœ… Packages created: $PACKAGE_NAME.tar.gz and $PACKAGE_NAME.zip"
    
    - name: Upload packages
      uses: actions/upload-artifact@v3
      with:
        name: quick-package
        path: |
          *.tar.gz
          *.zip
        retention-days: 7